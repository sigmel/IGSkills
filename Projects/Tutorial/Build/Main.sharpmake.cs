using Sharpmake; // Contains the entire Sharpmake object library.

[module: Sharpmake.Include("../../../Engine/Build/Engine.sharpmake.cs")]

// Represents the project that will be generated by Sharpmake and that contains
// the sample C++ code.
[Sharpmake.Generate]
public class TutorialProject : Project
{
    public string BasePath = @"[project.SharpmakeCsPath]/../";

    public TutorialProject()
    {
        // The name of the project in Visual Studio. The default is the name of
        // the class, but you usually want to override that.
        Name = "Tutorial";

        // The directory that contains the source code we want to build is the
        // same as this one. This string essentially means "the directory of
        // the script you're reading right now."
        SourceRootPath = @"[project.SharpmakeCsPath]/../Source";

        // Specify the targets for which we want to generate a configuration
        // for. Instead of creating multiple targets manually here, we can
        // use the binary OR operator to define multiple targets at once.
        // Sharpmake will generate all combinations possible and generate a
        // target for it.
        //
        // The code below is the same as creating 4 separate targets having
        // those flag combinations:
        //    * Platform.win32, DevEnv.vs2015, Optimization.Debug
        //    * Platform.win32, DevEnv.vs2015, Optimization.Release
        //    * Platform.win64, DevEnv.vs2015, Optimization.Debug
        //    * Platform.win64, DevEnv.vs2015, Optimization.Release
        AddTargets(new Target(
            // we want a target that builds for both 32 and 64-bit Windows.
            Platform.win64,

            // we only care about Visual Studio 2015. (Edit as needed.)
            DevEnv.vs2022,

            // of course, we want a debug and a release configuration.
            Optimization.Debug | Optimization.Release,

            // support Dll or Lib engine types
            OutputType.Dll | OutputType.Lib));

        IsFileNameToLower = false;
    }

    // Sets the properties of each configuration (conf) according to the target.
    //
    // This method is called once for every target specified by AddTargets. Since
    // we only want vs2015 targets and we want 32- and 64-bit targets, each having
    // a debug and a release version, we have 1 x 2 x 2 targets to configure, so it
    // will be called 4 times.
    //
    // If we had instead specified vs2012 | vs2015 | vs2017 it would have been
    // called 12 times. (3 x 2 x 2)
    [Configure()]
    public void ConfigureAll(Project.Configuration conf, Target target)
    {
        conf.Name = "[target.Optimization]_[target.OutputType]";
        conf.ProjectFileName = "[project.Name]_[target.DevEnv]_[target.Platform]";
        conf.ProjectPath = "[project.BasePath]/generated/projects";

        conf.IntermediatePath = @"[conf.ProjectPath]/obj/[project.Name]/[target.Platform]_[conf.Name]_[target.DevEnv]";

        conf.Options.Add(Options.Vc.Linker.TreatLinkerWarningAsErrors.Enable);

        conf.Defines.Add("_HAS_EXCEPTIONS=0");

        conf.AddPublicDependency<IGSkills.EngineLibProject>(target);
    }
}

// Represents the solution that will be generated and that will contain the
// project with the sample code.
[Sharpmake.Generate]
public class TutorialSolution : Sharpmake.Solution
{
    public string BasePath = @"[solution.SharpmakeCsPath]/../";

    public TutorialSolution()
    {
        Name = "Tutorial";
        AddTargets(new Target(Platform.win64, DevEnv.vs2022, Optimization.Debug | Optimization.Release, OutputType.Dll | OutputType.Lib));

        IsFileNameToLower = false;
    }

    [Configure()]
    public void ConfigureAll(Configuration conf, Target target)
    {
        conf.Name = "[target.Optimization]_[target.OutputType]";
        conf.SolutionFileName = "[solution.Name]_[target.DevEnv]_[target.Platform]";
        conf.SolutionPath = @"[solution.BasePath]";
        conf.AddProject<TutorialProject>(target);
    }
}

public static class Main
{
    [Sharpmake.Main]
    public static void SharpmakeMain(Sharpmake.Arguments arguments)
    {
        //KitsRootPaths.SetUseKitsRootForDevEnv(DevEnv.vs2022, KitsRootEnum.KitsRoot10, Options.Vc.General.WindowsTargetPlatformVersion.v10_0_17763_0);

        // Tells Sharpmake to generate the solution described by
        // BasicsSolution.
        arguments.Generate<TutorialSolution>();
    }
}